{"name":"Minitouch","tagline":"Minimal multitouch event producer for Android.","body":"# minitouch\r\n\r\nMinitouch provides a socket interface for triggering multitouch events and gestures on Android devices. It works without root if started via [ADB](http://developer.android.com/tools/help/adb.html) on SDK 21 or lower. The sole exception is SDK 20 (Android Wear), which does require root. The lowest SDK level we test is 10 (i.e. Android 2.3.3).\r\n\r\nIt works especially well with HTML5 multitouch events, and unlike the Android [monkey](http://developer.android.com/tools/help/monkey.html) tool, allows you to access the whole screen (including any software buttons).\r\n\r\n## Building\r\n\r\nBuilding requires [NDK](https://developer.android.com/tools/sdk/ndk/index.html), and is known to work with at least with NDK Revision 10 (July 2014).\r\n\r\nWe include [libevdev](http://www.freedesktop.org/wiki/Software/libevdev/) as a Git submodule, so first make sure you've fetched it.\r\n\r\n```\r\ngit submodule init\r\ngit submodule update\r\n```\r\n\r\nThen it's simply a matter of invoking `ndk-build`.\r\n\r\n```\r\nndk-build\r\n```\r\nYou should now have the binaries available in `./libs`.\r\n\r\n## Running\r\n\r\nYou'll need to [build](#building) first. You can then use the included [run.sh](run.sh) script to run the right binary on your device. If you have multiple devices connected, set `ANDROID_SERIAL` before running the script.\r\n\r\nTo run manually, you have to first figure out which ABI your device supports:\r\n\r\n```bash\r\nABI=$(adb shell getprop ro.product.cpu.abi | tr -d '\\r')\r\n```\r\n\r\n_Note that as Android shell always ends lines with CRLF, you'll have to remove the CR like above or the rest of the commands will not work properly._\r\n\r\n_Also note that if you've got multiple devices connected, setting `$ANDROID_SERIAL` will make things quite a bit easier as you won't have to specify the `-s <serial>` option every time._\r\n\r\nNow, push the appropriate binary to the device:\r\n\r\n```bash\r\nadb push libs/$ABI/minitouch /data/local/tmp/\r\n```\r\n\r\nNote that for SDK <16, you will have to use the `minitouch-nopie` executable which comes without [PIE](http://en.wikipedia.org/wiki/Position-independent_code#Position-independent_executables) support. Check [run.sh](run.sh) for a scripting example.\r\n\r\nAt this point it might be useful to check the usage:\r\n\r\n```bash\r\nadb shell /data/local/tmp/minitouch -h\r\n```\r\n\r\nCurrently, this should output be something along the lines of:\r\n\r\n```\r\nUsage: /data/local/tmp/minitouch [-h] [-d <device>] [-n <name>]\r\n  -d <device>: Use the given touch device. Otherwise autodetect.\r\n  -n <name>:   Change the name of of the abtract unix domain socket. (minitouch)\r\n  -h:          Show help.\r\n````\r\n\r\nSo, we can simply run the binary without any options, and it will try to detect an appropriate device and start listening on an abstract unix domain socket.\r\n\r\n```bash\r\nadb shell /data/local/tmp/minitouch\r\n```\r\n\r\nUnless there was an error message and the binary exited, we should now have a socket open on the device. Now we simply need to create a local forward so that we can connect to the socket.\r\n\r\n```bash\r\nadb forward tcp:1111 localabstract:minitouch\r\n```\r\n\r\nNow you can connect to the socket using the local port. Note that currently **only one connection at a time is supported.** This is mainly because it would otherwise be too easy to submit broken event streams, confusing the driver and possibly freezing the device until a reboot (which, by the way, you'd most likely have to do with `adb reboot` due to the unresponsive screen). Anyway, let's connect.\r\n\r\n```bash\r\nnc localhost 1111\r\n```\r\n\r\nThis will give you some strange output that will be explained in the next section.\r\n\r\n## Usage\r\n\r\nIt is assumed that you now have an open connection to the minitouch socket. If not, follow the [instructions](#running) above.\r\n\r\nThe minitouch protocol is based on LF-separated lines. Each line is a separate command, and each line begins with a single ASCII letter which specifies the command type. Space-separated command-specific arguments then follow.\r\n\r\nWhen you first open a connection to the socket, you'll get some protocol metadata which you'll need need to read from the socket. Other than that there will be no responses of any kind.\r\n\r\n### Readable from the socket\r\n\r\n#### `v <version>`\r\n\r\nExample output: `v 1`\r\n\r\nThe protocol version. This line is guaranteed to come first in the output. Argument layout may change between versions, so you might want to check if your code supports this version or not.\r\n\r\n#### `^ <max-contacts> <max-x> <max-y> <max-pressure>`\r\n\r\nExample output: `^ 2 320 480 255`\r\n\r\nThis gives you the upper bounds of arguments, as reported by the touch device. If you use larger values you will most likely confuse the driver (possibly freezing the screen, requiring a reboot) or the value will simply be ignored.\r\n\r\nIt's also very important to note that the maximum X and Y coordinates may, but usually do not, match the display size. You'll need to work out a good way to map display coordinates to touch coordinates if required, possibly by using percentages for screen coordinates.\r\n\r\n### Writable to the socket\r\n\r\n#### `c`\r\n\r\nExample input: `c`\r\n\r\nCommits the current set of changed touches, causing the to play out on the screen. Nothing visible will happen until the commit, but depending on the device type, they may already have been buffered.\r\n\r\nCommits are not required to list all active contacts. Changes from the previous state are enough.\r\n\r\nSame goes for multi-contact touches. The contacts may move around in separate commits or even the same commit. If one contact moves, the others are not required to.\r\n\r\nThe order of touches in a single commit is not important either. For example you can list contact 5 before contact 0.\r\n\r\nNote however that you cannot have more than one `d`, `m` or `u` *for the same `<contact>`* in one commit.\r\n\r\n#### `r`\r\n\r\nExample input: `r`\r\n\r\nAttemps to reset the current set of touches by creating appropriate `u` events and then committing them. As an invalid sequence of events may cause the screen to freeze, you should call for a reset if you have any doubts about the integrity of your events. For example, two `touchstart` events for the same contact is very suspect and most likely means that you lost a `touchend` event somehow.\r\n\r\nWe try to discard obviously out-of-order events automatically, but sometimes it's not enough.\r\n\r\nIf the screen freezes you'll have to reboot the device. With careful use this will not happen.\r\n\r\n#### `d <contact> <x> <y> <pressure>`\r\n\r\nExample input: `d 0 10 10 50`\r\n\r\nSchedules a touch down on contact `<contact>` at `<x>,<y>` with `<pressure>` pressure for the next commit.\r\n\r\nYou cannot have more than one `d`, `m` or `u` *for the same `<contact>`* in one commit.\r\n\r\n#### `m <contact> <x> <y> <pressure>`\r\n\r\nExample input: `m 0 10 10 50`\r\n\r\nSchedules a touch move on contact `<contact>` at `<x>,<y>` with `<pressure>` pressure for the next commit.\r\n\r\nYou cannot have more than one `d`, `m` or `u` *for the same `<contact>`* in one commit.\r\n\r\n#### `u <contact>`\r\n\r\nExample input: `u 0`\r\n\r\nSchedules a touch up on contact `<contact>`. If you need the contact to move first, use a combination of `m` and `u` separated by a commit.\r\n\r\nYou cannot have more than one `d`, `m` or `u` *for the same `<contact>`* in one commit.\r\n\r\n### Examples\r\n\r\nTap on (10, 10) with 50 pressure using a single contact.\r\n\r\n```\r\nd 0 10 10 50\r\nc\r\nu 0\r\nc\r\n```\r\n\r\nLong tap on (10, 10) with 50 pressure using a single contact.\r\n\r\n```\r\nd 0 10 10 50\r\nc\r\n<wait in your own code>\r\nu 0\r\nc\r\n```\r\n\r\nTap on (10, 10) and (20, 20) simultaneously with 50 pressure using two contacts.\r\n\r\n```\r\nd 0 10 10 50\r\nd 1 20 20 50\r\nc\r\nu 0\r\nu 1\r\nc\r\n```\r\n\r\nTap on (10, 10), keep it pressed, then after a while also tap on (20, 20), keep it pressed, then release the first contact and finally release the second contact.\r\n\r\n```\r\nd 0 10 10 50\r\nc\r\n<wait in your own code>\r\nd 1 20 20 50\r\nc\r\n<wait in your own code>\r\nu 0\r\nc\r\n<wait in your own code>\r\nu 1\r\nc\r\n```\r\n\r\nSwipe from (0, 0) to (100, 0) using a single contact. You'll need to wait between commits in your own code to slow it down.\r\n\r\n```\r\nd 0 0 0 50\r\nc\r\nm 0 20 0 50\r\nc\r\nm 0 40 0 50\r\nc\r\nm 0 60 0 50\r\nc\r\nm 0 80 0 50\r\nc\r\nm 0 100 0 50\r\nc\r\nu 0\r\nc\r\n```\r\n\r\nPinch with two contacts going from (0, 100) to (50, 50) and (100, 0) to (50, 50). You'll need to wait between commits in your own code to slow it down.\r\n\r\n```\r\nd 0 0 100 50\r\nd 1 100 0 50\r\nc\r\nm 0 10 90 50\r\nm 1 90 10 50\r\nc\r\nm 0 20 80 50\r\nm 1 80 20 50\r\nc\r\nm 0 20 80 50\r\nm 1 80 20 50\r\nc\r\nm 0 30 70 50\r\nm 1 70 30 50\r\nc\r\nm 0 40 60 50\r\nm 1 60 40 50\r\nc\r\nm 0 50 50 50\r\nm 1 50 50 50\r\nc\r\nu 0\r\nu 1\r\nc\r\n```\r\n\r\nThe same pinch but with more chaotic (or natural) ordering.\r\n\r\n```\r\nd 1 100 0 50\r\nc\r\nd 0 0 100 50\r\nc\r\nm 1 90 10 50\r\nm 0 10 90 50\r\nc\r\nm 0 20 80 50\r\nc\r\nm 1 80 20 50\r\nc\r\nm 0 20 80 50\r\nm 1 80 20 50\r\nc\r\nm 0 30 70 50\r\nc\r\nm 1 70 30 50\r\nc\r\nm 1 60 40 50\r\nc\r\nm 0 40 60 50\r\nc\r\nm 0 50 50 50\r\nm 1 50 50 50\r\nc\r\nu 0\r\nc\r\nu 1\r\nc\r\n```\r\n\r\n## Contributing\r\n\r\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\r\n\r\n## License\r\n\r\nSee [LICENSE](LICENSE).\r\n\r\nCopyright Â© CyberAgent, Inc. All Rights Reserved.\r\n","google":"UA-64458786-1","note":"Don't delete this file! It's used internally to help with page regeneration."}